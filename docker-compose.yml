services:
  postgres:
    image: postgres
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=12
    ports:
      - "5432:5432"
    # volumes:
    #   - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 15s
      timeout: 15s
      retries: 3

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "rabbitmq-diagnostics -q status && rabbitmq-diagnostics -q check_local_alarms",
        ]
      interval: 30s
      timeout: 30s
      retries: 3

  auth:
    build:
      context: ./auth
    container_name: auth
    command: ["python", "main.py"]
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/docs"]
      start_period: 5s
      interval: 15s
      timeout: 15s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  gateway:
    build:
      context: ./gateway
    container_name: gateway
    command: ["python", "main.py"]
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/docs"]
      start_period: 5s
      interval: 15s
      timeout: 15s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  ml_services:
    build:
      context: ./ml_services
    container_name: ml_service
    command: ["python", "main.py"]
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  notification_service:
    build:
      context: ./notification_service
    container_name: notification_service
    command: ["python", "main.py"]
    depends_on:
      auth:
        condition: service_healthy
